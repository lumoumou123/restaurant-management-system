{"remainingRequest":"C:\\Users\\18167\\Desktop\\big-data\\node_modules\\.store\\vue-loader@15.11.1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\18167\\Desktop\\big-data\\src\\views\\emergencyDispatch\\gugeMap.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\18167\\Desktop\\big-data\\src\\views\\emergencyDispatch\\gugeMap.vue","mtime":1733473319310},{"path":"C:\\Users\\18167\\Desktop\\big-data\\node_modules\\.store\\cache-loader@4.1.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\18167\\Desktop\\big-data\\node_modules\\.store\\babel-loader@8.4.1\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\Users\\18167\\Desktop\\big-data\\node_modules\\.store\\cache-loader@4.1.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\18167\\Desktop\\big-data\\node_modules\\.store\\vue-loader@15.11.1\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICJHb29nbGVNYXAiLA0KICBwcm9wczogew0KICAgIGNhbnRpbmRpemhpOiBPYmplY3QsIC8vIOWNleS4quWvueixoQ0KICB9LA0KICBkYXRhKCkgew0KICAgIHJldHVybiB7DQogICAgICBtYXA6IG51bGwsIC8vIOWcsOWbvuWunuS+iw0KICAgICAgbWFya2VyczogW10sIC8vIOW9k+WJjeagh+iusOaVsOe7hA0KICAgICAgaXNNYXBMb2FkZWQ6IGZhbHNlLCAvLyDnlKjkuo7moIforrDlnLDlm77mmK/lkKbliqDovb3lrozmiJANCiAgICB9Ow0KICB9LA0KICB3YXRjaDogew0KICAgIGNhbnRpbmRpemhpOiB7DQogICAgICBoYW5kbGVyKG5ld1ZhbCkgew0KICAgICAgICBjb25zb2xlLmxvZyhuZXdWYWwsICJuZXdWYWwiKTsNCiAgICAgICAgaWYgKHRoaXMuaXNNYXBMb2FkZWQgJiYgbmV3VmFsICYmIG5ld1ZhbC5sYXQgJiYgbmV3VmFsLmxuZykgew0KICAgICAgICAgIHRoaXMuYW5pbWF0ZVBhblRvKG5ld1ZhbCk7IC8vIOS9v+eUqOWKqOeUu+W5s+enu+WIsOaWsOS9jee9rg0KICAgICAgICB9DQogICAgICB9LA0KICAgICAgaW1tZWRpYXRlOiB0cnVlLCAvLyDliJ3lp4vliqDovb3ml7bkuZ/op6blj5ENCiAgICB9LA0KICB9LA0KICBtb3VudGVkKCkgew0KICAgIHRoaXMuaW5pdE1hcCgpOw0KICB9LA0KICBtZXRob2RzOiB7DQogICAgaW5pdE1hcCgpIHsNCiAgICAgIC8vIOehruS/nSBET00g5bey5Yqg6L295bm25a2Y5ZyoDQogICAgICBjb25zdCBtYXBDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFwIik7DQogICAgICBpZiAoIW1hcENvbnRhaW5lcikgew0KICAgICAgICBjb25zb2xlLmVycm9yKCLlnLDlm77lrrnlmajmnKrmib7liLDvvIEiKTsNCiAgICAgICAgcmV0dXJuOw0KICAgICAgfQ0KDQogICAgICB0cnkgew0KICAgICAgICAvLyDliJ3lp4vljJblnLDlm77vvIzpu5jorqTkuK3lv4Pngrnorr7nva7kuLrniLHlsJTlhbANCiAgICAgICAgdGhpcy5tYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKG1hcENvbnRhaW5lciwgew0KICAgICAgICAgIGNlbnRlcjogeyBsYXQ6IDUzLjQxMjkxLCBsbmc6IC04LjI0Mzg5IH0sIC8vIOm7mOiupOS4reW/g+WdkOaghw0KICAgICAgICAgIHpvb206IDcsIC8vIOWIneWni+e8qeaUvue6p+WIqw0KICAgICAgICB9KTsNCg0KICAgICAgICB0aGlzLmlzTWFwTG9hZGVkID0gdHJ1ZTsgLy8g5qCH6K6w5Zyw5Zu+5Yqg6L295oiQ5YqfDQoNCiAgICAgICAgLy8g5aaC5p6c5Yid5aeLIGBjYW50aW5kaXpoaWAg5a2Y5Zyo77yM5bmz56e76KeG6KeS5Yiw5oyH5a6a5L2N572uDQogICAgICAgIGlmICh0aGlzLmNhbnRpbmRpemhpICYmIHRoaXMuY2FudGluZGl6aGkubGF0ICYmIHRoaXMuY2FudGluZGl6aGkubG5nKSB7DQogICAgICAgICAgdGhpcy5hbmltYXRlUGFuVG8odGhpcy5jYW50aW5kaXpoaSk7DQogICAgICAgIH0NCiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7DQogICAgICAgIGNvbnNvbGUuZXJyb3IoIuWcsOWbvuWKoOi9veWksei0pe+8miIsIGVycm9yKTsNCiAgICAgICAgdGhpcy5yZXRyeUxvYWRNYXAoKTsgLy8g5aaC5p6c5Yqg6L295aSx6LSl77yM5bCd6K+V6YeN5paw5Yqg6L29DQogICAgICB9DQogICAgfSwNCiAgICByZXRyeUxvYWRNYXAoKSB7DQogICAgICAvLyDph43mlrDlsJ3or5XliqDovb3lnLDlm74NCiAgICAgIGNvbnNvbGUubG9nKCLlsJ3or5Xph43mlrDliqDovb3lnLDlm74uLi4iKTsNCiAgICAgIHNldFRpbWVvdXQoKCkgPT4gew0KICAgICAgICB0aGlzLmluaXRNYXAoKTsNCiAgICAgIH0sIDEwMDApOyAvLyDlu7bov58gMSDnp5Lph43mlrDlsJ3or5UNCiAgICB9LA0KICAgIGFuaW1hdGVQYW5Ubyhsb2NhdGlvbikgew0KICAgICAgY29uc29sZS5sb2cobG9jYXRpb24sICJsb2NhdGlvbnMiKTsNCg0KICAgICAgLy8g5L2/55SoIHNldEludGVydmFsIOWunueOsOW5s+enu+WKqOeUuw0KICAgICAgY29uc3Qgc3RlcHMgPSAzMDsgLy8g5Yqo55S755qE5q2l5pWwDQogICAgICBjb25zdCBpbnRlcnZhbFRpbWUgPSAyMDsgLy8g5q+P5q2l6Ze06ZqU55qE5pe26Ze077yI5q+r56eS77yJDQoNCiAgICAgIGNvbnN0IHN0YXJ0TGF0ID0gdGhpcy5tYXAuZ2V0Q2VudGVyKCkubGF0KCk7DQogICAgICBjb25zdCBzdGFydExuZyA9IHRoaXMubWFwLmdldENlbnRlcigpLmxuZygpOw0KDQogICAgICBjb25zdCBkZWx0YUxhdCA9IChsb2NhdGlvbi5sYXQgLSBzdGFydExhdCkgLyBzdGVwczsNCiAgICAgIGNvbnN0IGRlbHRhTG5nID0gKGxvY2F0aW9uLmxuZyAtIHN0YXJ0TG5nKSAvIHN0ZXBzOw0KDQogICAgICBsZXQgY3VycmVudFN0ZXAgPSAwOw0KDQogICAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHsNCiAgICAgICAgY3VycmVudFN0ZXArKzsNCiAgICAgICAgY29uc3QgbGF0ID0gc3RhcnRMYXQgKyBkZWx0YUxhdCAqIGN1cnJlbnRTdGVwOw0KICAgICAgICBjb25zdCBsbmcgPSBzdGFydExuZyArIGRlbHRhTG5nICogY3VycmVudFN0ZXA7DQoNCiAgICAgICAgdGhpcy5tYXAuc2V0Q2VudGVyKHsgbGF0LCBsbmcgfSk7DQoNCiAgICAgICAgaWYgKGN1cnJlbnRTdGVwID49IHN0ZXBzKSB7DQogICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7DQogICAgICAgICAgdGhpcy5tYXAuc2V0Q2VudGVyKHsgbGF0OiBsb2NhdGlvbi5sYXQsIGxuZzogbG9jYXRpb24ubG5nIH0pOw0KICAgICAgICAgIHRoaXMubWFwLnNldFpvb20oMTgpOyAvLyDmlL7lpKflnLDlm74NCg0KICAgICAgICAgIC8vIOabtOaWsOagh+iusA0KICAgICAgICAgIHRoaXMuY2xlYXJNYXJrZXJzKCk7DQogICAgICAgICAgdGhpcy5hZGRNYXJrZXIobG9jYXRpb24pOw0KICAgICAgICB9DQogICAgICB9LCBpbnRlcnZhbFRpbWUpOw0KICAgIH0sDQogICAgYWRkTWFya2VyKGxvY2F0aW9uKSB7DQogICAgICBjb25zdCBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHsNCiAgICAgICAgcG9zaXRpb246IHsgbGF0OiBsb2NhdGlvbi5sYXQsIGxuZzogbG9jYXRpb24ubG5nIH0sDQogICAgICAgIG1hcDogdGhpcy5tYXAsDQogICAgICAgIHRpdGxlOiBsb2NhdGlvbi50aXRsZSB8fCAiTG9jYXRpb24iLCAvLyDpu5jorqTmoIfpopgNCiAgICAgICAgLy8g6K6+572u6Ieq5a6a5LmJ5Zu+5qCHDQogICAgICAgIC8vIGljb246IHsNCiAgICAgICAgLy8gICB1cmw6IGxvY2F0aW9uLmljb25VcmwgfHwgcmVxdWlyZSgnLi4vLi4vYXNzZXRzL2ltZ3MvcmVucXVuX2x1LnBuZycpLCAvLyDpu5jorqTlm77moIcNCiAgICAgICAgLy8gICBzY2FsZWRTaXplOiBuZXcgZ29vZ2xlLm1hcHMuU2l6ZSgzMCwgMzApLCAvLyDlm77moIflpKflsI8NCiAgICAgICAgLy8gfSwNCiAgICAgIH0pOw0KDQogICAgICAvLyDmt7vliqDkv6Hmga/nqpflj6MNCiAgICAgIA0KICAgICAgY29uc3QgaW5mb1dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHsNCiAgICAgICAgY29udGVudDogYA0KICAgICAgICAgIDxkaXYgc3R5bGU9ImZvbnQtc2l6ZTogMTRweDsiPg0KICAgICAgICAgICAgPGgzPiR7bG9jYXRpb24udGl0bGUgfHwgIuWtlOS4gOWHoSJ9PC9oMz4NCiAgICAgICAgICAgIDxwPjxzdHJvbmc+6K+E5YiGOjwvc3Ryb25nPiAke2xvY2F0aW9uLnJhdGluZyB8fCAiMuWIhiJ9PC9wPg0KICAgICAgICAgICAgPHA+PHN0cm9uZz7okKXkuJrml7bpl7Q6PC9zdHJvbmc+ICR7bG9jYXRpb24uaG91cnMgfHwgIuaXqeS4iuWFq+eCueWIsOaZmuS4iuWFq+eCuSJ9PC9wPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICBgLA0KICAgICAgfSk7DQoNCiAgICAgIC8vIOe7keWumueCueWHu+S6i+S7tg0KICAgICAgbWFya2VyLmFkZExpc3RlbmVyKCJjbGljayIsICgpID0+IHsNCiAgICAgICAgaW5mb1dpbmRvdy5vcGVuKHRoaXMubWFwLCBtYXJrZXIpOw0KICAgICAgfSk7DQoNCiAgICAgIHRoaXMubWFya2Vycy5wdXNoKG1hcmtlcik7IC8vIOWtmOWCqOagh+iusA0KICAgIH0sDQogICAgY2xlYXJNYXJrZXJzKCkgew0KICAgICAgLy8g5riF6Zmk5Zyw5Zu+5LiK55qE5qCH6K6wDQogICAgICB0aGlzLm1hcmtlcnMuZm9yRWFjaCgobWFya2VyKSA9PiBtYXJrZXIuc2V0TWFwKG51bGwpKTsNCiAgICAgIHRoaXMubWFya2VycyA9IFtdOw0KICAgIH0sDQogIH0sDQp9Ow0K"},{"version":3,"sources":["gugeMap.vue"],"names":[],"mappings":";AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"gugeMap.vue","sourceRoot":"src/views/emergencyDispatch","sourcesContent":["<template>\r\n  <div>\r\n    <!-- 地图容器 -->\r\n    <div id=\"map\" style=\"width: 100%; height: 100vh;\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"GoogleMap\",\r\n  props: {\r\n    cantindizhi: Object, // 单个对象\r\n  },\r\n  data() {\r\n    return {\r\n      map: null, // 地图实例\r\n      markers: [], // 当前标记数组\r\n      isMapLoaded: false, // 用于标记地图是否加载完成\r\n    };\r\n  },\r\n  watch: {\r\n    cantindizhi: {\r\n      handler(newVal) {\r\n        console.log(newVal, \"newVal\");\r\n        if (this.isMapLoaded && newVal && newVal.lat && newVal.lng) {\r\n          this.animatePanTo(newVal); // 使用动画平移到新位置\r\n        }\r\n      },\r\n      immediate: true, // 初始加载时也触发\r\n    },\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      // 确保 DOM 已加载并存在\r\n      const mapContainer = document.getElementById(\"map\");\r\n      if (!mapContainer) {\r\n        console.error(\"地图容器未找到！\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // 初始化地图，默认中心点设置为爱尔兰\r\n        this.map = new google.maps.Map(mapContainer, {\r\n          center: { lat: 53.41291, lng: -8.24389 }, // 默认中心坐标\r\n          zoom: 7, // 初始缩放级别\r\n        });\r\n\r\n        this.isMapLoaded = true; // 标记地图加载成功\r\n\r\n        // 如果初始 `cantindizhi` 存在，平移视角到指定位置\r\n        if (this.cantindizhi && this.cantindizhi.lat && this.cantindizhi.lng) {\r\n          this.animatePanTo(this.cantindizhi);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"地图加载失败：\", error);\r\n        this.retryLoadMap(); // 如果加载失败，尝试重新加载\r\n      }\r\n    },\r\n    retryLoadMap() {\r\n      // 重新尝试加载地图\r\n      console.log(\"尝试重新加载地图...\");\r\n      setTimeout(() => {\r\n        this.initMap();\r\n      }, 1000); // 延迟 1 秒重新尝试\r\n    },\r\n    animatePanTo(location) {\r\n      console.log(location, \"locations\");\r\n\r\n      // 使用 setInterval 实现平移动画\r\n      const steps = 30; // 动画的步数\r\n      const intervalTime = 20; // 每步间隔的时间（毫秒）\r\n\r\n      const startLat = this.map.getCenter().lat();\r\n      const startLng = this.map.getCenter().lng();\r\n\r\n      const deltaLat = (location.lat - startLat) / steps;\r\n      const deltaLng = (location.lng - startLng) / steps;\r\n\r\n      let currentStep = 0;\r\n\r\n      const interval = setInterval(() => {\r\n        currentStep++;\r\n        const lat = startLat + deltaLat * currentStep;\r\n        const lng = startLng + deltaLng * currentStep;\r\n\r\n        this.map.setCenter({ lat, lng });\r\n\r\n        if (currentStep >= steps) {\r\n          clearInterval(interval);\r\n          this.map.setCenter({ lat: location.lat, lng: location.lng });\r\n          this.map.setZoom(18); // 放大地图\r\n\r\n          // 更新标记\r\n          this.clearMarkers();\r\n          this.addMarker(location);\r\n        }\r\n      }, intervalTime);\r\n    },\r\n    addMarker(location) {\r\n      const marker = new google.maps.Marker({\r\n        position: { lat: location.lat, lng: location.lng },\r\n        map: this.map,\r\n        title: location.title || \"Location\", // 默认标题\r\n        // 设置自定义图标\r\n        // icon: {\r\n        //   url: location.iconUrl || require('../../assets/imgs/renqun_lu.png'), // 默认图标\r\n        //   scaledSize: new google.maps.Size(30, 30), // 图标大小\r\n        // },\r\n      });\r\n\r\n      // 添加信息窗口\r\n      \r\n      const infoWindow = new google.maps.InfoWindow({\r\n        content: `\r\n          <div style=\"font-size: 14px;\">\r\n            <h3>${location.title || \"孔一凡\"}</h3>\r\n            <p><strong>评分:</strong> ${location.rating || \"2分\"}</p>\r\n            <p><strong>营业时间:</strong> ${location.hours || \"早上八点到晚上八点\"}</p>\r\n          </div>\r\n        `,\r\n      });\r\n\r\n      // 绑定点击事件\r\n      marker.addListener(\"click\", () => {\r\n        infoWindow.open(this.map, marker);\r\n      });\r\n\r\n      this.markers.push(marker); // 存储标记\r\n    },\r\n    clearMarkers() {\r\n      // 清除地图上的标记\r\n      this.markers.forEach((marker) => marker.setMap(null));\r\n      this.markers = [];\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n/* 地图样式 */\r\n#map {\r\n  width: 100%;\r\n  height: 100vh;\r\n}\r\n</style>\r\n"]}]}