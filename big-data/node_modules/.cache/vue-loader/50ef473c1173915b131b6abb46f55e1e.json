{"remainingRequest":"C:\\Users\\18167\\Desktop\\big-data\\node_modules\\.store\\vue-loader@15.11.1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\18167\\Desktop\\big-data\\src\\views\\emergencyDispatch\\gugeMap.vue?vue&type=style&index=0&id=684cc7e2&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\18167\\Desktop\\big-data\\src\\views\\emergencyDispatch\\gugeMap.vue","mtime":1739146273584},{"path":"C:\\Users\\18167\\Desktop\\big-data\\node_modules\\.store\\css-loader@3.6.0\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\18167\\Desktop\\big-data\\node_modules\\.store\\vue-loader@15.11.1\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\18167\\Desktop\\big-data\\node_modules\\.store\\postcss-loader@3.0.0\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\18167\\Desktop\\big-data\\node_modules\\.store\\cache-loader@4.1.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\18167\\Desktop\\big-data\\node_modules\\.store\\vue-loader@15.11.1\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQovKiDlnLDlm77moLflvI8gKi8NCiNtYXAgew0KICB3aWR0aDogMTAwJTsNCiAgaGVpZ2h0OiAxMDB2aDsNCn0NCg0KLmN1c3RvbS1pbmZvLXdpbmRvdyB7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgYmFja2dyb3VuZDogd2hpdGU7DQogIHBhZGRpbmc6IDIwcHg7DQogIGJvcmRlci1yYWRpdXM6IDhweDsNCiAgYm94LXNoYWRvdzogMCAycHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMSk7DQogIHotaW5kZXg6IDEwMDA7DQogIG1pbi13aWR0aDogMzUwcHg7DQogIG1heC13aWR0aDogNDUwcHg7DQogIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC0xMDAlKTsNCn0NCg0KLmluZm8taGVhZGVyIHsNCiAgZGlzcGxheTogZmxleDsNCiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOw0KICBhbGlnbi1pdGVtczogY2VudGVyOw0KICBtYXJnaW4tYm90dG9tOiAxNXB4Ow0KICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2VlZTsNCiAgcGFkZGluZy1ib3R0b206IDEwcHg7DQp9DQoNCi5pbmZvLWhlYWRlciBoMyB7DQogIG1hcmdpbjogMDsNCiAgY29sb3I6ICMzMzM7DQp9DQoNCi5jbG9zZS1idG4gew0KICBjdXJzb3I6IHBvaW50ZXI7DQogIGZvbnQtc2l6ZTogMjRweDsNCiAgY29sb3I6ICM2NjY7DQp9DQoNCi5pbmZvLWNvbnRlbnQgew0KICBjb2xvcjogIzY2NjsNCn0NCg0KLmluZm8taXRlbSB7DQogIG1hcmdpbi1ib3R0b206IDEwcHg7DQogIGRpc3BsYXk6IGZsZXg7DQogIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogIGdhcDogMTBweDsNCn0NCg0KLnJhdGluZy1zeXN0ZW0gew0KICBtYXJnaW4tdG9wOiAxNXB4Ow0KICBwYWRkaW5nLXRvcDogMTVweDsNCiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlZWU7DQp9DQoNCi5pbmZvLWltYWdlIHsNCiAgbWFyZ2luOiAtMjBweCAtMjBweCAxNXB4IC0yMHB4OyAvKiDkvb/lm77niYflu7bkvLjliLDovrnnvJggKi8NCiAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgaGVpZ2h0OiAxNTBweDsgLyog5Zu65a6a5Zu+54mH5a655Zmo6auY5bqmICovDQp9DQoNCi5pbmZvLWltYWdlIGltZyB7DQogIHdpZHRoOiAxMDAlOw0KICBoZWlnaHQ6IDEwMCU7DQogIG9iamVjdC1maXQ6IGNvdmVyOyAvKiDnoa7kv53lm77niYfloavlhYXmlbTkuKrlrrnlmaggKi8NCiAgZGlzcGxheTogYmxvY2s7DQp9DQoNCi8qIOiwg+aVtCBlbC1yYXRlIOeahOagt+W8jyAqLw0KOmRlZXAoLmVsLXJhdGUpIHsNCiAgZGlzcGxheTogZmxleDsNCiAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCn0NCg0KOmRlZXAoLmVsLXJhdGVfX3RleHQpIHsNCiAgbWFyZ2luLWxlZnQ6IDEwcHg7DQogIGZvbnQtc2l6ZTogMTRweDsNCiAgY29sb3I6ICM2NjY7DQp9DQo="},{"version":3,"sources":["gugeMap.vue"],"names":[],"mappings":";AAiOA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"gugeMap.vue","sourceRoot":"src/views/emergencyDispatch","sourcesContent":["<template>\r\n  <div>\r\n    <!-- 地图容器 -->\r\n    <div id=\"map\" style=\"width: 100%; height: 100vh;\"></div>\r\n\r\n    <!-- 自定义弹窗 -->\r\n    <div v-if=\"showCustomInfoWindow\" class=\"custom-info-window\" :style=\"{\r\n      top: infoWindowPosition.top,\r\n      left: infoWindowPosition.left\r\n    }\">\r\n      <div class=\"info-header\">\r\n        <h3>{{ selectedLocation.name || \"暂无信息\" }}</h3>\r\n        <span class=\"close-btn\" @click=\"showCustomInfoWindow = false\">&times;</span>\r\n      </div>\r\n      <div class=\"info-image\">\r\n        <img\r\n          :src=\"selectedLocation.image || require('@/assets/imgs/image.png')\"\r\n          :alt=\"selectedLocation.name\"\r\n        >\r\n      </div>\r\n      <div class=\"info-content\">\r\n        <div class=\"info-item\">\r\n          <strong>营业时间：</strong>\r\n          <span>{{ selectedLocation.businessHours || \"暂无\" }}</span>\r\n        </div>\r\n        <div class=\"info-item\">\r\n          <strong>当前评分：</strong>\r\n          <el-rate\r\n            v-model=\"selectedLocation.score\"\r\n            disabled\r\n            show-score\r\n            text-color=\"#ff9900\"\r\n            score-template=\"{value}分\"\r\n          />\r\n        </div>\r\n        <div class=\"rating-system\">\r\n          <strong>为餐厅评分：</strong>\r\n          <el-rate\r\n            v-model=\"currentRating\"\r\n            :colors=\"['#99A9BF', '#F7BA2A', '#FF9900']\"\r\n            @change=\"rateLocation\"\r\n            show-text\r\n            :texts=\"['很差', '较差', '一般', '不错', '很好']\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { rate,getlist} from '@/api'\r\nexport default {\r\n  name: \"GoogleMap\",\r\n  props: {\r\n    cantindizhi: Object, // 单个对象\r\n  },\r\n  data() {\r\n    return {\r\n      map: null, // 地图实例\r\n      markers: [], // 当前标记数组\r\n      isMapLoaded: false, // 用于标记地图是否加载完成\r\n      showCustomInfoWindow: false, // 控制自定义弹窗显示\r\n      selectedLocation: {}, // 当前选中的位置信息\r\n      currentRating: 0, // 当前评分\r\n      infoWindowPosition: {\r\n        top: '0px',\r\n        left: '0px'\r\n      }\r\n    };\r\n  },\r\n  watch: {\r\n    cantindizhi: {\r\n      handler(newVal) {\r\n        console.log(newVal, \"newVal\");\r\n        if (this.isMapLoaded && newVal && newVal.lat && newVal.lng) {\r\n          newVal.lat = Number(newVal.lat)\r\n          newVal.lng = Number(newVal.lng)\r\n          newVal.score = Number(newVal.score)\r\n          this.animatePanTo(newVal); // 使用动画平移到位置\r\n        }\r\n      },\r\n      immediate: true, // 初始加载时也触发\r\n    },\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      // 确保 DOM 已加载并存在\r\n      const mapContainer = document.getElementById(\"map\");\r\n      if (!mapContainer) {\r\n        console.error(\"地图容器未找到！\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // 初始化地图，默认中心点设置为爱尔兰\r\n        this.map = new google.maps.Map(mapContainer, {\r\n          center: { lat: 53.41291, lng: -8.24389 }, // 默认中心坐标\r\n          zoom: 7, // 初始缩放级别\r\n        });\r\n\r\n        this.isMapLoaded = true; // 标记地图加载成功\r\n\r\n        // 如果初始 `cantindizhi` 存在，平移视角到指定位置\r\n        if (this.cantindizhi && this.cantindizhi.lat && this.cantindizhi.lng) {\r\n          this.animatePanTo(this.cantindizhi);\r\n        }\r\n\r\n        // 添加地图移动事件监听，移动时关闭弹窗\r\n        this.map.addListener('dragstart', () => {\r\n          this.showCustomInfoWindow = false;\r\n        });\r\n\r\n        // 添加地图缩放事件监听，缩放时关闭弹窗\r\n        this.map.addListener('zoom_changed', () => {\r\n          this.showCustomInfoWindow = false;\r\n        });\r\n      } catch (error) {\r\n        console.error(\"地图加载失败：\", error);\r\n        this.retryLoadMap(); // 如果加载失败，尝试重新加载\r\n      }\r\n    },\r\n    retryLoadMap() {\r\n      // 重新尝试加载地图\r\n      console.log(\"尝试重新加载地图...\");\r\n      setTimeout(() => {\r\n        this.initMap();\r\n      }, 1000); // 延迟 1 秒重新尝试\r\n    },\r\n    animatePanTo(location) {\r\n      console.log(location, \"locations\");\r\n\r\n      // 使用 setInterval 实现平移动画\r\n      const steps = 30; // 动画的步数\r\n      const intervalTime = 20; // 每步间隔的时间（毫秒）\r\n\r\n      const startLat = this.map.getCenter().lat();\r\n      const startLng = this.map.getCenter().lng();\r\n\r\n      const deltaLat = (location.lat - startLat) / steps;\r\n      const deltaLng = (location.lng - startLng) / steps;\r\n\r\n      let currentStep = 0;\r\n\r\n      const interval = setInterval(() => {\r\n        currentStep++;\r\n        const lat = startLat + deltaLat * currentStep;\r\n        const lng = startLng + deltaLng * currentStep;\r\n\r\n        this.map.setCenter({ lat, lng });\r\n\r\n        if (currentStep >= steps) {\r\n          clearInterval(interval);\r\n          this.map.setCenter({ lat: location.lat, lng: location.lng });\r\n          this.map.setZoom(18); // 放大地图\r\n\r\n          // 更新标记\r\n          this.clearMarkers();\r\n          this.addMarker(location);\r\n        }\r\n      }, intervalTime);\r\n    },\r\n    addMarker(location) {\r\n      const marker = new google.maps.Marker({\r\n        position: { lat: location.lat, lng: location.lng },\r\n        map: this.map,\r\n        title: location.title || \"Location\",\r\n      });\r\n\r\n      // 创建一个全局的 overlay 实例\r\n      const overlay = new google.maps.OverlayView();\r\n      overlay.draw = function() {};\r\n      overlay.setMap(this.map);\r\n\r\n      marker.addListener(\"click\", () => {\r\n        console.log(\"Marker clicked\");\r\n        const markerPosition = marker.getPosition();\r\n\r\n        const calculatePosition = () => {\r\n          console.log(\"Calculating position\");\r\n          const projection = overlay.getProjection();\r\n          const point = projection.fromLatLngToContainerPixel(markerPosition);\r\n\r\n          this.selectedLocation = location;\r\n          this.currentRating = location.userRating || 0;\r\n          this.infoWindowPosition = {\r\n            top: `${point.y}px`,\r\n            left: `${point.x}px`\r\n          };\r\n\r\n          this.showCustomInfoWindow = true;\r\n        };\r\n\r\n        // 如果 projection 已经准备好\r\n        if (overlay.getProjection()) {\r\n          calculatePosition();\r\n        } else {\r\n          // 如果 projection 还没准备好，等待它准备好并立即计算\r\n          overlay.addListener('add', () => {\r\n            setTimeout(calculatePosition, 100); // 添加小延迟确保 projection 完全准备好\r\n          });\r\n        }\r\n      });\r\n\r\n      this.markers.push(marker);\r\n    },\r\n    clearMarkers() {\r\n      // 清除地图上的标记\r\n      this.markers.forEach((marker) => marker.setMap(null));\r\n      this.markers = [];\r\n    },\r\n    rateLocation(value) {\r\n      this.selectedLocation.userRating = value;\r\n      rate({id:this.selectedLocation.id,score:value}).then(res=>{\r\n        this.$message.success(\"评分成功\");\r\n      })\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 地图样式 */\r\n#map {\r\n  width: 100%;\r\n  height: 100vh;\r\n}\r\n\r\n.custom-info-window {\r\n  position: absolute;\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  z-index: 1000;\r\n  min-width: 350px;\r\n  max-width: 450px;\r\n  transform: translate(-50%, -100%);\r\n}\r\n\r\n.info-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 15px;\r\n  border-bottom: 1px solid #eee;\r\n  padding-bottom: 10px;\r\n}\r\n\r\n.info-header h3 {\r\n  margin: 0;\r\n  color: #333;\r\n}\r\n\r\n.close-btn {\r\n  cursor: pointer;\r\n  font-size: 24px;\r\n  color: #666;\r\n}\r\n\r\n.info-content {\r\n  color: #666;\r\n}\r\n\r\n.info-item {\r\n  margin-bottom: 10px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.rating-system {\r\n  margin-top: 15px;\r\n  padding-top: 15px;\r\n  border-top: 1px solid #eee;\r\n}\r\n\r\n.info-image {\r\n  margin: -20px -20px 15px -20px; /* 使图片延伸到边缘 */\r\n  overflow: hidden;\r\n  height: 150px; /* 固定图片容器高度 */\r\n}\r\n\r\n.info-image img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover; /* 确保图片填充整个容器 */\r\n  display: block;\r\n}\r\n\r\n/* 调整 el-rate 的样式 */\r\n:deep(.el-rate) {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n:deep(.el-rate__text) {\r\n  margin-left: 10px;\r\n  font-size: 14px;\r\n  color: #666;\r\n}\r\n</style>\r\n"]}]}