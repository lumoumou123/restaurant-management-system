{"remainingRequest":"C:\\Users\\18167\\Desktop\\big-data\\node_modules\\.store\\vue-loader@15.11.1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\18167\\Desktop\\big-data\\src\\views\\emergencyDispatch\\gugeMap.vue?vue&type=style&index=0&id=684cc7e2&lang=css","dependencies":[{"path":"C:\\Users\\18167\\Desktop\\big-data\\src\\views\\emergencyDispatch\\gugeMap.vue","mtime":1733473319310},{"path":"C:\\Users\\18167\\Desktop\\big-data\\node_modules\\.store\\css-loader@3.6.0\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\18167\\Desktop\\big-data\\node_modules\\.store\\vue-loader@15.11.1\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\18167\\Desktop\\big-data\\node_modules\\.store\\postcss-loader@3.0.0\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\18167\\Desktop\\big-data\\node_modules\\.store\\cache-loader@4.1.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\18167\\Desktop\\big-data\\node_modules\\.store\\vue-loader@15.11.1\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQovKiDlnLDlm77moLflvI8gKi8NCiNtYXAgew0KICB3aWR0aDogMTAwJTsNCiAgaGVpZ2h0OiAxMDB2aDsNCn0NCg=="},{"version":3,"sources":["gugeMap.vue"],"names":[],"mappings":";AA8IA;AACA;AACA;AACA;AACA","file":"gugeMap.vue","sourceRoot":"src/views/emergencyDispatch","sourcesContent":["<template>\r\n  <div>\r\n    <!-- 地图容器 -->\r\n    <div id=\"map\" style=\"width: 100%; height: 100vh;\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"GoogleMap\",\r\n  props: {\r\n    cantindizhi: Object, // 单个对象\r\n  },\r\n  data() {\r\n    return {\r\n      map: null, // 地图实例\r\n      markers: [], // 当前标记数组\r\n      isMapLoaded: false, // 用于标记地图是否加载完成\r\n    };\r\n  },\r\n  watch: {\r\n    cantindizhi: {\r\n      handler(newVal) {\r\n        console.log(newVal, \"newVal\");\r\n        if (this.isMapLoaded && newVal && newVal.lat && newVal.lng) {\r\n          this.animatePanTo(newVal); // 使用动画平移到新位置\r\n        }\r\n      },\r\n      immediate: true, // 初始加载时也触发\r\n    },\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      // 确保 DOM 已加载并存在\r\n      const mapContainer = document.getElementById(\"map\");\r\n      if (!mapContainer) {\r\n        console.error(\"地图容器未找到！\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // 初始化地图，默认中心点设置为爱尔兰\r\n        this.map = new google.maps.Map(mapContainer, {\r\n          center: { lat: 53.41291, lng: -8.24389 }, // 默认中心坐标\r\n          zoom: 7, // 初始缩放级别\r\n        });\r\n\r\n        this.isMapLoaded = true; // 标记地图加载成功\r\n\r\n        // 如果初始 `cantindizhi` 存在，平移视角到指定位置\r\n        if (this.cantindizhi && this.cantindizhi.lat && this.cantindizhi.lng) {\r\n          this.animatePanTo(this.cantindizhi);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"地图加载失败：\", error);\r\n        this.retryLoadMap(); // 如果加载失败，尝试重新加载\r\n      }\r\n    },\r\n    retryLoadMap() {\r\n      // 重新尝试加载地图\r\n      console.log(\"尝试重新加载地图...\");\r\n      setTimeout(() => {\r\n        this.initMap();\r\n      }, 1000); // 延迟 1 秒重新尝试\r\n    },\r\n    animatePanTo(location) {\r\n      console.log(location, \"locations\");\r\n\r\n      // 使用 setInterval 实现平移动画\r\n      const steps = 30; // 动画的步数\r\n      const intervalTime = 20; // 每步间隔的时间（毫秒）\r\n\r\n      const startLat = this.map.getCenter().lat();\r\n      const startLng = this.map.getCenter().lng();\r\n\r\n      const deltaLat = (location.lat - startLat) / steps;\r\n      const deltaLng = (location.lng - startLng) / steps;\r\n\r\n      let currentStep = 0;\r\n\r\n      const interval = setInterval(() => {\r\n        currentStep++;\r\n        const lat = startLat + deltaLat * currentStep;\r\n        const lng = startLng + deltaLng * currentStep;\r\n\r\n        this.map.setCenter({ lat, lng });\r\n\r\n        if (currentStep >= steps) {\r\n          clearInterval(interval);\r\n          this.map.setCenter({ lat: location.lat, lng: location.lng });\r\n          this.map.setZoom(18); // 放大地图\r\n\r\n          // 更新标记\r\n          this.clearMarkers();\r\n          this.addMarker(location);\r\n        }\r\n      }, intervalTime);\r\n    },\r\n    addMarker(location) {\r\n      const marker = new google.maps.Marker({\r\n        position: { lat: location.lat, lng: location.lng },\r\n        map: this.map,\r\n        title: location.title || \"Location\", // 默认标题\r\n        // 设置自定义图标\r\n        // icon: {\r\n        //   url: location.iconUrl || require('../../assets/imgs/renqun_lu.png'), // 默认图标\r\n        //   scaledSize: new google.maps.Size(30, 30), // 图标大小\r\n        // },\r\n      });\r\n\r\n      // 添加信息窗口\r\n      \r\n      const infoWindow = new google.maps.InfoWindow({\r\n        content: `\r\n          <div style=\"font-size: 14px;\">\r\n            <h3>${location.title || \"孔一凡\"}</h3>\r\n            <p><strong>评分:</strong> ${location.rating || \"2分\"}</p>\r\n            <p><strong>营业时间:</strong> ${location.hours || \"早上八点到晚上八点\"}</p>\r\n          </div>\r\n        `,\r\n      });\r\n\r\n      // 绑定点击事件\r\n      marker.addListener(\"click\", () => {\r\n        infoWindow.open(this.map, marker);\r\n      });\r\n\r\n      this.markers.push(marker); // 存储标记\r\n    },\r\n    clearMarkers() {\r\n      // 清除地图上的标记\r\n      this.markers.forEach((marker) => marker.setMap(null));\r\n      this.markers = [];\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n/* 地图样式 */\r\n#map {\r\n  width: 100%;\r\n  height: 100vh;\r\n}\r\n</style>\r\n"]}]}