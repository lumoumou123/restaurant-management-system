{"remainingRequest":"C:\\Users\\18167\\Desktop\\final year\\big-data\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\18167\\Desktop\\final year\\big-data\\src\\views\\RestaurantStatistics.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\18167\\Desktop\\final year\\big-data\\src\\views\\RestaurantStatistics.vue","mtime":1744734188753},{"path":"C:\\Users\\18167\\Desktop\\final year\\big-data\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1742859679583},{"path":"C:\\Users\\18167\\Desktop\\final year\\big-data\\node_modules\\babel-loader\\lib\\index.js","mtime":1742859682775},{"path":"C:\\Users\\18167\\Desktop\\final year\\big-data\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1742859679583},{"path":"C:\\Users\\18167\\Desktop\\final year\\big-data\\node_modules\\vue-loader\\lib\\index.js","mtime":1742859683968}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["RestaurantStatistics.vue"],"names":[],"mappings":";AAqfile":"RestaurantStatistics.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"restaurant-statistics\">\n    <div class=\"header\">\n      <h1>Restaurant Statistics Dashboard</h1>\n      <el-button type=\"primary\" icon=\"el-icon-back\" @click=\"backToHome\">Back to Home</el-button>\n    </div>\n\n    <!-- 筛选条件 -->\n    <div class=\"filters\">\n      <el-date-picker\n        v-model=\"dateRange\"\n        type=\"daterange\"\n        range-separator=\"to\"\n        start-placeholder=\"Start Date\"\n        end-placeholder=\"End Date\"\n        :default-time=\"['00:00:00', '23:59:59']\"\n        @change=\"fetchStatistics\"\n      />\n      \n      <el-select\n        v-model=\"selectedRestaurant\"\n        placeholder=\"Select Restaurant\"\n        @change=\"fetchStatistics\"\n        class=\"restaurant-select\"\n      >\n        <el-option\n          v-for=\"restaurant in restaurants\"\n          :key=\"restaurant.id\"\n          :label=\"restaurant.name\"\n          :value=\"restaurant.id\"\n        />\n      </el-select>\n\n      <div class=\"action-buttons\">\n        <el-button type=\"primary\" @click=\"loadMockData\">Load Mock Data</el-button>\n        <el-button type=\"success\" @click=\"testAPI\">Test API</el-button>\n        <el-button type=\"info\" @click=\"logRestaurantDetails\">Log Restaurant Details</el-button>\n      </div>\n    </div>\n\n    <!-- 主要指标卡片 -->\n    <div class=\"metric-cards\">\n      <el-card class=\"metric-card\">\n        <div class=\"metric-title\">Average Rating</div>\n        <div class=\"metric-value\">\n          <span class=\"number\">{{ Number(statistics.averageRating || 0).toFixed(1) }}</span>\n          <el-rate\n            v-model=\"statistics.averageRating\"\n            disabled\n            show-score\n            text-color=\"#ff9900\"\n            score-template=\"\"\n          />\n          <span class=\"rating-count\" v-if=\"statistics.totalScores\">\n            ({{ statistics.totalScores }} ratings)\n          </span>\n        </div>\n      </el-card>\n\n      <el-card class=\"metric-card\">\n        <div class=\"metric-title\">Comments</div>\n        <div class=\"metric-value\">\n          <span class=\"number\">{{ statistics.totalComments || 0 }}</span>\n        </div>\n      </el-card>\n\n      <el-card class=\"metric-card\">\n        <div class=\"metric-title\">Menu Items</div>\n        <div class=\"metric-value\">\n          <span class=\"number\">{{ statistics.menuItemCount || 0 }}</span>\n        </div>\n      </el-card>\n\n      <el-card class=\"metric-card\">\n        <div class=\"metric-title\">Total Views</div>\n        <div class=\"metric-value\">\n          <span class=\"number\">{{ statistics.totalViews || 0 }}</span>\n        </div>\n      </el-card>\n    </div>\n\n    <!-- 图表区域 -->\n    <div class=\"charts-container\">\n      <el-row :gutter=\"20\">\n        <el-col :span=\"12\">\n          <el-card class=\"chart-card\">\n            <div slot=\"header\">Rating Distribution</div>\n            <div class=\"chart-container\">\n              <v-chart :option=\"ratingDistributionChart\" autoresize />\n            </div>\n          </el-card>\n        </el-col>\n        \n        <el-col :span=\"12\">\n          <el-card class=\"chart-card\">\n            <div slot=\"header\">Views Trend</div>\n            <div class=\"chart-container\">\n              <v-chart :option=\"viewsTrendChart\" autoresize />\n            </div>\n          </el-card>\n        </el-col>\n        \n        <el-col :span=\"12\">\n          <el-card class=\"chart-card\">\n            <div slot=\"header\">Popular Dishes</div>\n            <div class=\"chart-container\">\n              <v-chart :option=\"popularDishesChart\" autoresize />\n            </div>\n          </el-card>\n        </el-col>\n        \n        <el-col :span=\"12\">\n          <el-card class=\"chart-card\">\n            <div slot=\"header\">Comments Timeline</div>\n            <div class=\"chart-container\">\n              <v-chart :option=\"commentsTimelineChart\" autoresize />\n            </div>\n          </el-card>\n        </el-col>\n      </el-row>\n      \n      <!-- 添加评论列表展示 -->\n      <el-row>\n        <el-col :span=\"24\">\n          <el-card class=\"comments-card\">\n            <div slot=\"header\" class=\"comments-header\">\n              <span>Recent Comments</span>\n              <el-button size=\"small\" type=\"primary\" @click=\"loadComments\">Refresh Comments</el-button>\n            </div>\n            \n            <div v-if=\"comments.length === 0\" class=\"no-comments\">\n              No comments available for this restaurant.\n            </div>\n            \n            <div v-else class=\"comments-list\">\n              <el-timeline>\n                <el-timeline-item\n                  v-for=\"(comment, index) in comments\"\n                  :key=\"index\"\n                  :timestamp=\"formatDate(comment.createTime)\"\n                  :color=\"getCommentColor(comment.score)\"\n                >\n                  <el-card class=\"comment-card\">\n                    <div class=\"comment-header\">\n                      <span class=\"comment-author\">{{ comment.userName || 'Anonymous' }}</span>\n                      <el-rate\n                        v-model=\"comment.score\"\n                        disabled\n                        show-score\n                        text-color=\"#ff9900\"\n                      />\n                    </div>\n                    <div class=\"comment-content\">{{ comment.content }}</div>\n                  </el-card>\n                </el-timeline-item>\n              </el-timeline>\n            </div>\n          </el-card>\n        </el-col>\n      </el-row>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ECharts from 'vue-echarts';\nimport 'echarts/lib/chart/bar';\nimport 'echarts/lib/chart/line';\nimport 'echarts/lib/chart/pie';\nimport 'echarts/lib/component/tooltip';\nimport 'echarts/lib/component/title';\nimport 'echarts/lib/component/legend';\nimport 'echarts/lib/component/grid';\nimport axios from 'axios';\nimport { getRestaurantStatistics } from '@/api/statistics'\nimport { getComments } from '@/api/index'\n\nexport default {\n  name: 'RestaurantStatistics',\n  components: {\n    'v-chart': ECharts\n  },\n  data() {\n    return {\n      dateRange: [\n        new Date(new Date().setDate(new Date().getDate() - 7)),\n        new Date()\n      ],\n      selectedRestaurant: null,\n      restaurants: [],\n      statistics: {\n        averageRating: 0,\n        totalComments: 0,\n        menuItemCount: 0,\n        totalViews: 0,\n        ratingDistribution: {},\n        viewsTrend: [],\n        popularDishes: [],\n        commentsTimeline: []\n      },\n      userRole: '',\n      userId: null,\n      comments: []\n    };\n  },\n  computed: {\n    ratingDistributionChart() {\n      const data = Object.entries(this.statistics.ratingDistribution || {}).map(\n        ([rating, count]) => ({\n          name: `${rating} Star`,\n          value: count\n        })\n      );\n\n      return {\n        tooltip: {\n          trigger: 'item',\n          formatter: '{b}: {c} ({d}%)'\n        },\n        legend: {\n          orient: 'vertical',\n          left: 'left'\n        },\n        series: [\n          {\n            type: 'pie',\n            radius: ['50%', '70%'],\n            avoidLabelOverlap: false,\n            label: {\n              show: true,\n              position: 'outside'\n            },\n            emphasis: {\n              label: {\n                show: true,\n                fontSize: '16',\n                fontWeight: 'bold'\n              }\n            },\n            labelLine: {\n              show: true\n            },\n            data: data\n          }\n        ]\n      };\n    },\n    viewsTrendChart() {\n      const { viewsTrend = [] } = this.statistics;\n      \n      // 添加日志以便调试\n      console.log('渲染趋势图表，数据格式:', typeof viewsTrend, '数据内容:', viewsTrend);\n      \n      // 确保viewsTrend是数组\n      if (!Array.isArray(viewsTrend)) {\n        console.error('viewsTrend不是数组，无法渲染图表', viewsTrend);\n        return {\n          tooltip: {\n            trigger: 'axis'\n          },\n          xAxis: {\n            type: 'category',\n            data: []\n          },\n          yAxis: {\n            type: 'value'\n          },\n          series: [\n            {\n              data: [],\n              type: 'line',\n              smooth: true,\n              areaStyle: {}\n            }\n          ]\n        };\n      }\n      \n      // 确保每个数据点都有date和views\n      const validData = viewsTrend.filter(item => item && item.date && item.views !== undefined);\n      console.log('过滤后的有效数据点:', validData.length);\n      \n      return {\n        tooltip: {\n          trigger: 'axis'\n        },\n        xAxis: {\n          type: 'category',\n          data: validData.map(item => item.date)\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [\n          {\n            data: validData.map(item => item.views),\n            type: 'line',\n            smooth: true,\n            areaStyle: {}\n          }\n        ]\n      };\n    },\n    popularDishesChart() {\n      const { popularDishes = [] } = this.statistics;\n      return {\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'shadow'\n          }\n        },\n        xAxis: {\n          type: 'value'\n        },\n        yAxis: {\n          type: 'category',\n          data: popularDishes.map(item => item.name)\n        },\n        series: [\n          {\n            type: 'bar',\n            data: popularDishes.map(item => item.orderCount)\n          }\n        ]\n      };\n    },\n    commentsTimelineChart() {\n      const { commentsTimeline = [] } = this.statistics;\n      return {\n        tooltip: {\n          trigger: 'axis'\n        },\n        xAxis: {\n          type: 'category',\n          data: commentsTimeline.map(item => item.date)\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [\n          {\n            data: commentsTimeline.map(item => item.count),\n            type: 'line',\n            smooth: true\n          }\n        ]\n      };\n    },\n    calculateTotalRatings() {\n      if (!this.statistics.ratingDistribution) return 0;\n      return Object.values(this.statistics.ratingDistribution).reduce((a, b) => a + b, 0);\n    }\n  },\n  created() {\n    // 获取用户信息\n    this.userRole = localStorage.getItem('userRole');\n    this.userId = localStorage.getItem('userId');\n    \n    // 设置默认日期范围为最近7天\n    const end = new Date();\n    const start = new Date();\n    start.setDate(start.getDate() - 7);\n    this.dateRange = [start, end];\n    \n    // 获取餐厅列表\n    this.fetchRestaurants();\n  },\n  methods: {\n    async fetchRestaurants() {\n      try {\n        // 获取认证信息\n        const token = localStorage.getItem('token');\n        const headers = token ? { 'Authorization': `Bearer ${token}` } : {};\n        \n        // 添加用户ID和角色到请求头\n        headers['X-User-Id'] = this.userId;\n        headers['X-User-Role'] = this.userRole;\n        \n        console.log(\"加载餐厅统计列表: 当前用户角色:\", this.userRole, \"用户ID:\", this.userId);\n        \n        let response;\n        \n        if (this.userRole === 'Manager') {\n          // 管理员可以看到所有餐厅\n          response = await axios.get('http://localhost:8080/api/canteen/list', { headers });\n        } else if (this.userRole === 'Owner') {\n          // 业主只能看到自己的餐厅\n          response = await axios.get(`http://localhost:8080/api/canteen/owner/canteens`, { headers });\n        } else {\n          this.$message.warning('您的用户角色不允许访问餐厅统计信息');\n          return;\n        }\n\n        if (response && response.data && response.data.code === 200) {\n          this.restaurants = response.data.data || [];\n          console.log(`成功加载${this.restaurants.length}家餐厅用于统计`);\n          \n          if (this.restaurants.length > 0) {\n            this.selectedRestaurant = this.restaurants[0].id;\n            this.fetchStatistics();\n          } else {\n            this.$message.warning('未找到任何餐厅');\n          }\n        } else {\n          this.$message.error('加载餐厅列表失败: ' + (response?.data?.msg || '未知错误'));\n          console.error(\"加载餐厅失败:\", response?.data);\n        }\n      } catch (error) {\n        console.error('Failed to fetch restaurants:', error);\n        console.error(\"请求失败详情:\", error.response ? error.response.data : error.message);\n        this.$message.error('Failed to load restaurants: ' + (error.response?.data?.msg || error.message));\n      }\n    },\n    async fetchStatistics() {\n      if (!this.selectedRestaurant || !this.dateRange) {\n        this.$message.warning('Please select both restaurant and date range');\n        return;\n      }\n\n      const [startDate, endDate] = this.dateRange;\n      console.log('Fetching statistics for:', {\n        restaurantId: this.selectedRestaurant,\n        startDate: startDate.toISOString().split('T')[0],\n        endDate: endDate.toISOString().split('T')[0]\n      });\n\n      try {\n        // 获取认证信息\n        const token = localStorage.getItem('token');\n        const headers = token ? { 'Authorization': `Bearer ${token}` } : {};\n        \n        // 添加用户ID和角色到请求头\n        headers['X-User-Id'] = this.userId;\n        headers['X-User-Role'] = this.userRole;\n        \n        console.log(`正在获取餐厅ID=${this.selectedRestaurant}的统计数据`);\n        \n        // 根据后端StatisticsController的路径调整URL\n        const response = await axios({\n          method: 'get',\n          url: 'http://localhost:8080/statistics/canting',\n          params: {\n            canteenId: this.selectedRestaurant,\n            startDate: startDate.toISOString().split('T')[0],\n            endDate: endDate.toISOString().split('T')[0]\n          },\n          headers\n        });\n\n        console.log('Raw API response:', response.data);\n\n        if (response.data && response.data.code === 200) {\n          this.statistics = response.data.data || {};\n          // Ensure averageRating is a number\n          this.statistics.averageRating = Number(this.statistics.averageRating || 0);\n          \n          // 确保所有必要的统计字段都存在，避免空指针\n          this.ensureStatisticsStructure();\n          \n          console.log('Processed statistics:', this.statistics);\n          \n          // 加载评论\n          this.loadComments();\n          \n          // 加载菜单项\n          this.loadMenuItems();\n        } else {\n          console.error('API error:', response.data);\n          this.$message.error(response.data?.msg || 'Failed to load statistics');\n          \n          // 如果获取失败，初始化空数据\n          this.resetStatistics();\n        }\n      } catch (error) {\n        console.error('Failed to fetch statistics:', error);\n        console.error(\"请求失败详情:\", error.response ? error.response.data : error.message);\n        this.$message.error('Failed to load statistics: ' + (error.response?.data?.msg || error.message));\n        \n        // 如果错误，初始化空数据\n        this.resetStatistics();\n      }\n    },\n    loadMockData() {\n      this.statistics = {\n        averageRating: 4.4,\n        totalComments: 15,\n        menuItemCount: 24,\n        totalViews: 4079,\n        ratingDistribution: {\n          '1 Star': 5,\n          '2 Stars': 10,\n          '3 Stars': 20,\n          '4 Stars': 40,\n          '5 Stars': 25\n        },\n        viewsTrend: Array.from({ length: 7 }, (_, i) => ({\n          date: new Date(Date.now() - (6 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n          views: Math.floor(Math.random() * 100) + 50\n        })),\n        popularDishes: [\n          { name: 'Dish 1', orderCount: 45 },\n          { name: 'Dish 2', orderCount: 38 },\n          { name: 'Dish 3', orderCount: 32 },\n          { name: 'Dish 4', orderCount: 25 },\n          { name: 'Dish 5', orderCount: 20 }\n        ],\n        commentsTimeline: Array.from({ length: 7 }, (_, i) => ({\n          date: new Date(Date.now() - (6 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n          count: Math.floor(Math.random() * 10)\n        }))\n      };\n      \n      // 生成模拟评论数据\n      this.comments = [\n        {\n          id: 1,\n          userName: 'John Doe',\n          content: 'Great food and excellent service! Will definitely come back again.',\n          score: 5,\n          createTime: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()\n        },\n        {\n          id: 2,\n          userName: 'Alice Smith',\n          content: 'Food was good but the wait time was a bit long.',\n          score: 4, \n          createTime: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString()\n        },\n        {\n          id: 3,\n          userName: 'Bob Johnson',\n          content: 'Average experience. Nothing special.',\n          score: 3,\n          createTime: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString()\n        },\n        {\n          id: 4,\n          userName: 'Emma Wilson',\n          content: 'Disappointed with the quality of food. Not worth the price.',\n          score: 2,\n          createTime: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000).toISOString()\n        },\n        {\n          id: 5,\n          userName: 'Michael Brown',\n          content: 'Terrible experience! Food was cold and service was rude.',\n          score: 1,\n          createTime: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()\n        }\n      ];\n    },\n    async testAPI() {\n      try {\n        // 获取认证信息\n        const token = localStorage.getItem('token');\n        const headers = token ? { 'Authorization': `Bearer ${token}` } : {};\n        \n        // 添加用户ID和角色到请求头\n        headers['X-User-Id'] = this.userId;\n        headers['X-User-Role'] = this.userRole;\n        \n        console.log('Testing statistics API...');\n        \n        const response = await axios.get('http://localhost:8080/api/statistics/test', { headers });\n        \n        if (response.data && response.data.code === 200) {\n          this.$message.success('API test successful');\n          console.log('API测试响应:', response.data);\n        } else {\n          this.$message.warning('API test returned unexpected response');\n          console.warn('API测试意外响应:', response.data);\n        }\n      } catch (error) {\n        console.error('API test failed:', error);\n        console.error(\"请求失败详情:\", error.response ? error.response.data : error.message);\n        this.$message.error('API test failed: ' + (error.response?.data?.msg || error.message));\n      }\n    },\n    logRestaurantDetails() {\n      console.log('Current Statistics:', this.statistics);\n      console.log('Selected Restaurant:', this.selectedRestaurant);\n      console.log('Date Range:', this.dateRange);\n    },\n    backToHome() {\n      this.$router.push('/');\n    },\n    // 重置统计数据为默认空值\n    resetStatistics() {\n      this.statistics = {\n        averageRating: 0,\n        totalComments: 0,\n        menuItemCount: 0,\n        totalViews: 0,\n        ratingDistribution: {},\n        viewsTrend: [],\n        popularDishes: [],\n        commentsTimeline: []\n      };\n    },\n    // 确保所有必要的统计字段都存在\n    ensureStatisticsStructure() {\n      if (!this.statistics) this.statistics = {};\n      \n      this.statistics.averageRating = Number(this.statistics.averageRating || 0);\n      this.statistics.totalComments = this.statistics.totalComments || 0;\n      this.statistics.menuItemCount = this.statistics.menuItemCount || 0;\n      this.statistics.totalViews = this.statistics.totalViews || 0;\n      \n      // 处理评分分布数据\n      if (this.statistics.ratingDistribution && typeof this.statistics.ratingDistribution === 'object') {\n        console.log('处理评分分布数据:', this.statistics.ratingDistribution);\n        \n        // 确保评分分布的键是字符串格式如 \"1 Star\", \"2 Stars\" 等\n        const formattedDistribution = {};\n        Object.entries(this.statistics.ratingDistribution).forEach(([rating, count]) => {\n          const stars = Number(rating);\n          if (!isNaN(stars)) {\n            formattedDistribution[`${stars} Star${stars > 1 ? 's' : ''}`] = count;\n          } else {\n            formattedDistribution[rating] = count;\n          }\n        });\n        \n        this.statistics.ratingDistribution = formattedDistribution;\n      } else {\n        this.statistics.ratingDistribution = {};\n      }\n      \n      // 处理viewsTrend：将对象格式转换为数组格式\n      if (this.statistics.viewsTrend && typeof this.statistics.viewsTrend === 'object' && !Array.isArray(this.statistics.viewsTrend)) {\n        // 如果viewsTrend是对象格式(后端返回的格式)，转换为数组格式\n        console.log('转换viewsTrend格式，从对象到数组:', this.statistics.viewsTrend);\n        \n        const trendArray = Object.entries(this.statistics.viewsTrend).map(([date, views]) => ({\n          date,\n          views: Number(views)\n        }));\n        \n        // 按日期排序\n        trendArray.sort((a, b) => new Date(a.date) - new Date(b.date));\n        this.statistics.viewsTrend = trendArray;\n        \n        console.log('转换后的viewsTrend:', this.statistics.viewsTrend);\n      } else if (!this.statistics.viewsTrend) {\n        this.statistics.viewsTrend = [];\n      }\n      \n      // 确保popularDishes是数组\n      if (!Array.isArray(this.statistics.popularDishes)) {\n        this.statistics.popularDishes = [];\n      }\n      \n      // 确保commentsTimeline是数组\n      if (this.statistics.commentsTimeline && typeof this.statistics.commentsTimeline === 'object' && !Array.isArray(this.statistics.commentsTimeline)) {\n        // 如果commentsTimeline是对象格式，转换为数组格式\n        const timelineArray = Object.entries(this.statistics.commentsTimeline).map(([date, count]) => ({\n          date,\n          count: Number(count)\n        }));\n        \n        // 按日期排序\n        timelineArray.sort((a, b) => new Date(a.date) - new Date(b.date));\n        this.statistics.commentsTimeline = timelineArray;\n      } else if (!this.statistics.commentsTimeline) {\n        this.statistics.commentsTimeline = [];\n      }\n    },\n    async loadComments() {\n      if (!this.selectedRestaurant) {\n        return;\n      }\n      \n      try {\n        // 获取认证信息\n        const token = localStorage.getItem('token');\n        const headers = token ? { 'Authorization': `Bearer ${token}` } : {};\n        \n        console.log(`正在获取餐厅ID=${this.selectedRestaurant}的评论列表`);\n        \n        const response = await getComments(this.selectedRestaurant);\n        \n        if (response && response.code === 200) {\n          let allComments = response.data || [];\n          \n          // 按时间从新到旧排序\n          allComments.sort((a, b) => new Date(b.createTime) - new Date(a.createTime));\n          \n          // 根据选定的日期范围筛选评论\n          if (this.dateRange && this.dateRange.length === 2) {\n            const [startDate, endDate] = this.dateRange;\n            // 设置结束日期为当天最后一毫秒，确保包含当天所有评论\n            const endOfDay = new Date(endDate);\n            endOfDay.setHours(23, 59, 59, 999);\n            \n            console.log(`根据日期范围筛选评论: ${startDate.toISOString()} 至 ${endOfDay.toISOString()}`);\n            \n            // 筛选在日期范围内的评论\n            this.comments = allComments.filter(comment => {\n              if (!comment.createTime) return false;\n              \n              const commentDate = new Date(comment.createTime);\n              return commentDate >= startDate && commentDate <= endOfDay;\n            });\n            \n            console.log(`筛选后评论数: ${this.comments.length}/${allComments.length}`);\n          } else {\n            this.comments = allComments;\n          }\n          \n          // 更新统计中的评论数量\n          this.statistics.totalComments = this.comments.length;\n          \n          console.log(`成功加载${this.comments.length}条评论，已更新统计数据`);\n        } else {\n          console.error('加载评论失败:', response);\n          this.$message.warning('Failed to load comments');\n          this.comments = [];\n        }\n      } catch (error) {\n        console.error('加载评论异常:', error);\n        this.$message.error('Error loading comments: ' + error.message);\n        this.comments = [];\n      }\n    },\n    async loadMenuItems() {\n      if (!this.selectedRestaurant) {\n        return;\n      }\n      \n      try {\n        // 获取认证信息\n        const token = localStorage.getItem('token');\n        const headers = token ? { 'Authorization': `Bearer ${token}` } : {};\n        \n        // 添加用户ID和角色到请求头\n        headers['X-User-Id'] = this.userId;\n        headers['X-User-Role'] = this.userRole;\n        \n        console.log(`正在获取餐厅ID=${this.selectedRestaurant}的菜单项`);\n        \n        // 使用正确的API路径\n        const response = await axios.get(\n          `http://localhost:8080/menu/restaurant/${this.selectedRestaurant}`,\n          { headers }\n        );\n\n        console.log('Menu items API response:', response.data);\n\n        if (response.data && response.data.code === 200) {\n          const menuItems = response.data.data || [];\n          // 更新统计中的菜单项数量\n          this.statistics.menuItemCount = menuItems.length;\n          \n          console.log(`成功加载${menuItems.length}个菜单项，已更新统计数据`);\n        } else {\n          console.error('加载菜单项失败:', response.data);\n          this.$message.warning('Failed to load menu items');\n          this.statistics.menuItemCount = 0;\n        }\n      } catch (error) {\n        console.error('加载菜单项异常:', error);\n        console.error(\"请求失败详情:\", error.response ? error.response.data : error.message);\n        this.$message.error('Error loading menu items: ' + (error.response?.data?.msg || error.message));\n        this.statistics.menuItemCount = 0;\n      }\n    },\n    formatDate(dateString) {\n      if (!dateString) return '';\n      \n      const date = new Date(dateString);\n      return date.toLocaleString();\n    },\n    getCommentColor(score) {\n      if (!score) return '#e6a23c';\n      \n      const numScore = Number(score);\n      if (numScore >= 4) return '#67c23a';  // 好评 - 绿色\n      if (numScore >= 2) return '#e6a23c';  // 中评 - 黄色\n      return '#f56c6c';  // 差评 - 红色\n    }\n  }\n};\n</script>\n\n<style scoped>\n.restaurant-statistics {\n  padding: 20px;\n  background-color: #f5f7fa;\n  min-height: 100vh;\n}\n\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.header h1 {\n  margin: 0;\n  color: #303133;\n}\n\n.filters {\n  display: flex;\n  gap: 20px;\n  margin-bottom: 20px;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n.restaurant-select {\n  min-width: 200px;\n}\n\n.action-buttons {\n  margin-left: auto;\n  display: flex;\n  gap: 10px;\n}\n\n.metric-cards {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.metric-card {\n  text-align: center;\n  padding: 20px;\n}\n\n.metric-title {\n  color: #909399;\n  font-size: 14px;\n  margin-bottom: 10px;\n}\n\n.metric-value {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n}\n\n.metric-value .number {\n  font-size: 32px;\n  font-weight: bold;\n  color: #303133;\n}\n\n.metric-value .rating-count {\n  font-size: 14px;\n  color: #909399;\n}\n\n.metric-value :deep(.el-rate) {\n  display: flex;\n  justify-content: center;\n  margin: 5px 0;\n}\n\n.metric-value :deep(.el-rate__icon) {\n  font-size: 20px;\n  margin-right: 4px;\n}\n\n.charts-container {\n  margin-top: 20px;\n}\n\n.chart-card {\n  margin-bottom: 20px;\n}\n\n.chart-container {\n  height: 300px;\n  width: 100%;\n}\n\n:deep(.el-card__header) {\n  padding: 15px 20px;\n  font-weight: bold;\n  color: #303133;\n}\n\n:deep(.el-date-editor.el-input),\n:deep(.el-date-editor.el-input__inner) {\n  width: 320px;\n}\n\n.comments-card {\n  margin-top: 20px;\n}\n\n.comments-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.no-comments {\n  text-align: center;\n  padding: 20px;\n  color: #999;\n  font-style: italic;\n}\n\n.comments-list {\n  max-height: 400px;\n  overflow-y: auto;\n}\n\n.comment-card {\n  margin-bottom: 10px;\n}\n\n.comment-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n}\n\n.comment-author {\n  font-weight: bold;\n  font-size: 16px;\n}\n\n.comment-content {\n  font-size: 14px;\n  line-height: 1.5;\n  white-space: pre-line;\n}\n</style> "]}]}